type Account {
  balance: Float
  closed: Boolean
  id: String!
  name: String
  offbudget: Boolean
}

type Category {
  group_id: Boolean
  hidden: Boolean
  id: String!
  is_income: Boolean
  name: String
}

type CategoryGroup {
  categories: [Category]
  hidden: Boolean
  id: String!
  is_income: Boolean
  name: String
}

scalar DateTime

input LoginUserInput {
  email: String!
  password: String!
  service: String
  version: String
}

type Mutation {
  addTime(input: TimeInput!): Task
  createTask(input: TaskInput!): Task
  loginUser(input: LoginUserInput!): User
}

type Payee {
  id: String!
  name: String
  rules: [PayeeRule]
  transfer_act: String
}

type PayeeRule {
  actions: [RuleAction]
  conditions: [RuleCondition]
  conditionsOp: String
  id: String!
  stage: String
}

type Project {
  _id: String!
  completedTasks: Int!
  date: Int!
  id: String!
  key: String!
  name: String!
  numberOfTasks: Int!
  sprints: [Sprint]
  timeTracking: [Int!]
}

type Query {
  account(id: String!): Account
  accounts: [Account]
  categories: [Category]
  category(id: String!): Category
  categoryGroup(id: String!): CategoryGroup
  categoryGroups: [CategoryGroup]
  payee(id: String!): Payee
  payees: [Payee]
  project(id: String!): Project
  projects: [Project]
  sprint(id: String!): Sprint
  sprints(filters: SprintInput): [Sprint]
  task(id: String!): Task
  tasks(filters: TasksInput): [Task]
  transaction(accountId: String, id: String!): Transaction
  transactions(accountId: String, dateFrom: String, dateTo: String): [Transaction]
}

type RuleAction {
  field: String
  op: String
  type: String
  value: String
}

type RuleCondition {
  field: String
  op: String
  type: String
  value: String
}

type Sprint {
  _id: String!
  dateFrom: String
  dateTo: String
  id: String!
  key: String!
  name: String!
  project: Project
  status: String!
  tasks: [Task!]
}

input SprintInput {
  search: String
  status: [String!]
}

type Task {
  _id: String!
  code: String!
  createdAt: Int!
  desc: String
  id: String!
  listId: String!
  name: String!
  priority: String
  project: Project!
  projectId: String!
  reference: String!
  status: String!
  storypoints: Int
  times: [TimeTracking!]
  totalTime: Int
  type: String!
  updatedAt: Int!
}

input TaskInput {
  description: String
  name: String!
  projectId: String!
}

input TasksInput {
  projectId: String
  search: String
  status: [String!]
}

input TimeInput {
  projectId: String!
  taskId: String!
  time: Int!
}

type TimeTracking {
  date: Int!
  desc: String
  duration: Int!
  taskId: String!
  timeId: String!
  userId: String!
}

type Transaction {
  account: String
  amount: Float!
  category: String
  cleared: Boolean!
  date: String
  error: String
  id: String
  imported_id: String
  imported_payee: String
  is_child: Boolean!
  is_parent: Boolean!
  notes: String
  parent_id: String
  payee: String
  reconciled: Boolean!
  schedule: String
  sort_order: Float!
  starting_balance_flag: Boolean!
  subtransactions: [Transaction!]
  tombstone: Boolean!
  transfer_id: String
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  id: Int
  lastname: String!
  name: String!
  updatedAt: DateTime!
}