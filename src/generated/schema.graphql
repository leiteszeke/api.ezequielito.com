type Mutation {
  addTime(input: TimeInput!): Task
  createTask(input: TaskInput!): Task
}

type Project {
  _id: String!
  completedTasks: Int!
  date: Int!
  id: String!
  key: String!
  name: String!
  numberOfTasks: Int!
  sprints: [Sprint]
  timeTracking: [Int!]
}

type Query {
  project(id: String!): Project
  projects: [Project]
  sprint(id: String!): Sprint
  sprints(filters: SprintInput): [Sprint]
  task(id: String!): Task
  tasks: [Task]
}

type Sprint {
  _id: String!
  dateFrom: String
  dateTo: String
  id: String!
  key: String!
  name: String!
  project: Project
  status: String!
}

input SprintInput {
  search: String
  status: [String!]
}

type Task {
  _id: String!
  createdAt: Int!
  desc: String
  id: String!
  listId: String!
  name: String!
  priority: String
  projectId: String!
  reference: String!
  status: String!
  storypoints: Int
  times: [TimeTracking!]
  totalTime: Int
  type: String!
  updatedAt: Int!
}

input TaskInput {
  description: String
  name: String!
  projectId: String!
}

input TimeInput {
  projectId: String!
  taskId: String!
  time: Int!
}

type TimeTracking {
  date: Int!
  desc: String
  duration: Int!
  taskId: String!
  timeId: String!
  userId: String!
}