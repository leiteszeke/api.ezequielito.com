type TimeTracking {
  timeId: String!
  duration: Int!
  desc: String
  userId: String!,
  taskId: String!,
  date: Int!
}

type Task {
  _id: String!

  id: String!
  projectId: String!
  listId: String!
  name: String!
  desc: String
  status: String!
  priority: String
  storypoints: Int
  type: String!
  code: String!

  updatedAt: Int!
  createdAt: Int!
  reference: String!

  times: [TimeTracking!]
  totalTime: Int
  project: Project!
}

input TimeInput {
  projectId: String!
  taskId: String!
  time: Int!
}

input TaskInput {
  projectId: String!
  name: String!
  description: String
}

input TasksInput {
  status: [String!]
  search: String
  projectId: String
}

type Query {
  tasks(filters: TasksInput): [Task]
  task(id: String!): Task
}

type Mutation {
  addTime(input: TimeInput!): Task
  createTask(input: TaskInput!): Task
}
